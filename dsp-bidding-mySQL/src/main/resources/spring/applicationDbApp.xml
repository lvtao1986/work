<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd  
     http://www.springframework.org/schema/tx  
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
     http://www.springframework.org/schema/jdbc  
     http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd 
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	<!-- 数据源配置 -->

	<!-- BoneCP configuration -->
	<bean id="appDataSourceImpl" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="${${db.config.app}.app.jdbc.driver}" />
		<property name="jdbcUrl" value="${${db.config.app}.app.jdbc.url}" />
		<property name="username" value="${${db.config.app}.app.jdbc.username}" />
		<property name="password" value="${${db.config.app}.app.jdbc.password}" />

		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriodInMinutes" value="10" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAgeInMinutes" value="10" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="3" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="1" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="3" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="3" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="50" />
		<!-- 每个分区释放链接助理线程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="3" />
		<!-- 在做keep-alive的时候的SQL语句 -->
		<property name="connectionTestStatement" value="select 1 from dual" />
		<!-- 在每次到数据库取连接的时候执行的SQL语句，只执行一次 -->
		<property name="initSQL" 	value="select 1 ip from dual" />
	</bean>
	
	<bean id="appReadDataSourceImpl" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="${${db.config.app}.app.read.jdbc.driver}" />
		<property name="jdbcUrl" value="${${db.config.app}.app.read.jdbc.url}" />
		<property name="username" value="${${db.config.app}.app.read.jdbc.username}" />
		<property name="password" value="${${db.config.app}.app.read.jdbc.password}" />

		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriodInMinutes" value="10" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAgeInMinutes" value="10" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="3" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="1" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="3" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="3" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="50" />
		<!-- 每个分区释放链接助理线程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="3" />
		<!-- 在做keep-alive的时候的SQL语句 -->
		<property name="connectionTestStatement" value="select 1 from dual" />
		<!-- 在每次到数据库取连接的时候执行的SQL语句，只执行一次 -->
		<property name="initSQL" 	value="select 1 ip from dual" />
	</bean>

	<bean id="appCostDataSourceImpl" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="${${db.config.app}.app.cost.jdbc.driver}" />
		<property name="jdbcUrl" value="${${db.config.app}.app.cost.jdbc.url}" />
		<property name="username" value="${${db.config.app}.app.cost.jdbc.username}" />
		<property name="password" value="${${db.config.app}.app.cost.jdbc.password}" />

		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriodInMinutes" value="10" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAgeInMinutes" value="10" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="3" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="1" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="3" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="3" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="50" />
		<!-- 每个分区释放链接助理线程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="3" />
		<!-- 在做keep-alive的时候的SQL语句 -->
		<property name="connectionTestStatement" value="select 1 from dual" />
		<!-- 在每次到数据库取连接的时候执行的SQL语句，只执行一次 -->
		<property name="initSQL" 	value="select 1 ip from dual" />
	</bean>

	<!-- Spring bean configuration. Tell Spring to bounce off BoneCP -->
	<!-- org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy com.jolbox.bonecp.spring.DynamicDataSourceProxy -->


	<bean id="appDataSource" class="com.jolbox.bonecp.spring.DynamicDataSourceProxy">
		<property name="targetDataSource" ref="appDataSourceImpl" />
	</bean>
	
	<bean id="appReadDataSource" class="com.jolbox.bonecp.spring.DynamicDataSourceProxy">
		<property name="targetDataSource" ref="appReadDataSourceImpl" />
	</bean>
	
	<bean id="appCostDataSource" class="com.jolbox.bonecp.spring.DynamicDataSourceProxy">
		<property name="targetDataSource" ref="appCostDataSourceImpl" />
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
			<property name="targetDataSource" ref="appDataSourceImpl" />
	</bean>

	<bean id="dataReadSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
			<property name="targetDataSource" ref="appReadDataSourceImpl" />
	</bean>
	
	<bean id="dataCostSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
			<property name="targetDataSource" ref="appCostDataSourceImpl" />
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="readTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataReadSource" />
	</bean>
	
	<bean id="costTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataCostSource" />
	</bean>
	
	<!-- 此处的 id simpleJdbcTemplate 不能改，因为 com.emar.adwiser.base.spring.dao.BaseDao 需要注入此 SimpleJdbcTemplate -->
	<bean id="simpleJdbcTemplate" name="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="readSimpleJdbcTemplate"  name="readSimpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg ref="dataReadSource" />
	</bean>
	
	<bean id="costSimpleJdbcTemplate"  name="costSimpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg ref="dataCostSource" />
	</bean>
	
	<bean id="jdbcTemplate"  name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="readJdbcTemplate" name="readJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataReadSource" />
	</bean>
	
	<bean id="costJdbcTemplate" name="costJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataCostSource" />
	</bean>
	
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
    </bean>

	<bean id="readTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="readTransactionManager" />
    </bean>
    
    <bean id="costTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="costTransactionManager" />
    </bean>
</beans>
